import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.whiteA700,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.primary,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return appTheme.indigo400.withOpacity(0.15);
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return appTheme.indigo400.withOpacity(0.15);
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 5,
        space: 5,
        color: appTheme.blueGray100,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.gray90002,
          fontSize: 16.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray90002,
          fontSize: 15.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray900.withOpacity(0.65),
          fontSize: 12.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        headlineLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 32.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        headlineSmall: TextStyle(
          color: appTheme.gray90002,
          fontSize: 24.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray90002,
          fontSize: 13.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: appTheme.gray600.withOpacity(0.5),
          fontSize: 10.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w900,
        ),
        titleLarge: TextStyle(
          color: appTheme.gray90002,
          fontSize: 20.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        titleMedium: TextStyle(
          color: appTheme.gray900,
          fontSize: 16.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: appTheme.gray90002,
          fontSize: 15.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF52B6DF),
    primaryContainer: Color(0XFF182A88),
    secondaryContainer: Color(0XFFE19747),

    // Error colors
    errorContainer: Color(0X8C000000),
    onError: Color(0XFF8F98FF),

    // On colors(text colors)
    onPrimary: Color(0X99191919),
    onPrimaryContainer: Color(0XFFEEF9F8),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber500 => Color(0XFFFFBB0D);
  Color get amber700 => Color(0XFFF59E0B);

  // Black
  Color get black900 => Color(0XFF000D07);

  // Blue
  Color get blue200 => Color(0XFF86CCE9);
  Color get blue400 => Color(0XFF50A7FF);
  Color get blue40033 => Color(0X3351B0DF);

  // BlueGray
  Color get blueGray100 => Color(0XFFCBD5E1);
  Color get blueGray200 => Color(0XFFB3BFCB);
  Color get blueGray20001 => Color(0XFFBCC1CD);
  Color get blueGray50 => Color(0XFFEFF2F5);
  Color get blueGray500 => Color(0XFF64748B);
  Color get blueGray600 => Color(0XFF316D86);
  Color get blueGray800 => Color(0XFF334155);

  // BlueGrayc
  Color get blueGray1008c => Color(0X8CD9D9D9);

  // Cyan
  Color get cyan30033 => Color(0X3351B6DF);
  Color get cyan50 => Color(0XFFDCF0F9);

  // DeepOrange
  Color get deepOrange400 => Color(0XFFFF7648);
  Color get deepOrange90067 => Color(0X67B45309);

  // Gray
  Color get gray100 => Color(0XFFF2F7FA);
  Color get gray10001 => Color(0XFFF3F6F6);
  Color get gray10002 => Color(0XFFF1F5F9);
  Color get gray10003 => Color(0XFFF3F3F3);
  Color get gray40033 => Color(0X33B2B2B2);
  Color get gray50 => Color(0XFFF8FBFA);
  Color get gray600 => Color(0XFF797C7B);
  Color get gray800 => Color(0XFF6F4439);
  Color get gray900 => Color(0XFF070B2E);
  Color get gray90001 => Color(0XFF242324);
  Color get gray90002 => Color(0XFF0F172A);
  Color get gray90003 => Color(0XFF212523);
  Color get gray90005 => Color(0X05111222);

  // Green
  Color get green800 => Color(0XFF2A714F);
  Color get greenA400 => Color(0XFF2BEF83);

  // Indigo
  Color get indigo400 => Color(0XFF4178D4);
  Color get indigo800 => Color(0XFF27487F);
  Color get indigoA200 => Color(0XFF5667FD);

  // LightBlue
  Color get lightBlue300 => Color(0XFF45B7E8);

  // LightGreen
  Color get lightGreen800 => Color(0XFF51804D);

  // Orange
  Color get orange200 => Color(0XFFFFC278);
  Color get orange50 => Color(0XFFFFF2E4);

  // OrangeABf
  Color get orangeA200Bf => Color(0XBFFFA23F);

  // Pink
  Color get pink900 => Color(0XFF86242E);

  // Red
  Color get red700 => Color(0XFFD42E2E);

  // Teal
  Color get teal300 => Color(0XFF4DC591);
  Color get teal30001 => Color(0XFF46BD84);
  Color get teal700 => Color(0XFF15786B);
  Color get teal800 => Color(0XFF00664F);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);

  // Yellow
  Color get yellow600 => Color(0XFFFED430);

  //86242E
  //27487F
  //brown
  Color get backgroundbrown => Color(0XF86242E);
  Color get backgroundorange => Color.fromARGB(255, 255, 191, 142);
  Color get backgroundblue => Color(0XF27487F);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
